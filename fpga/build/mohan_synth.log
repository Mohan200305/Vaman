
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Wolf <claire@symbioticeda.com>          |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+2406 (git sha1 ca763e6d5, gcc 10.2.1-6 -fPIC -Os)


-- Parsing `/data/data/com.termux/files/home/fpga-examples/blink/mohan.v' using frontend `verilog' --

1. Executing Verilog-2005 frontend: /data/data/com.termux/files/home/fpga-examples/blink/mohan.v
Parsing Verilog input from `/data/data/com.termux/files/home/fpga-examples/blink/mohan.v' to AST representation.
Generating RTLIL representation for module `\tff'.
Warning: wire '\p' is assigned in a block at /data/data/com.termux/files/home/fpga-examples/blink/mohan.v:22.3-22.8.
Warning: wire '\pbar' is assigned in a block at /data/data/com.termux/files/home/fpga-examples/blink/mohan.v:23.3-23.14.
Warning: wire '\q' is assigned in a block at /data/data/com.termux/files/home/fpga-examples/blink/mohan.v:30.2-30.7.
Warning: wire '\qbar' is assigned in a block at /data/data/com.termux/files/home/fpga-examples/blink/mohan.v:31.3-31.14.
Warning: wire '\r' is assigned in a block at /data/data/com.termux/files/home/fpga-examples/blink/mohan.v:38.3-38.8.
Warning: wire '\rbar' is assigned in a block at /data/data/com.termux/files/home/fpga-examples/blink/mohan.v:39.3-39.14.
Successfully finished Verilog frontend.

-- Running command `tcl /data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/quicklogic/synth.tcl' --
[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

2. Executing Verilog-2005 frontend: /data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v
Parsing Verilog input from `/data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\VCC'.
Generating RTLIL representation for module `\GND'.
Generating RTLIL representation for module `\fpga_interconnect'.
Generating RTLIL representation for module `\CLOCK_CELL'.
Generating RTLIL representation for module `\BIDIR_CELL'.
Generating RTLIL representation for module `\SDIOMUX_CELL'.
Generating RTLIL representation for module `\T_FRAG'.
Generating RTLIL representation for module `\B_FRAG'.
Generating RTLIL representation for module `\Q_FRAG'.
Generating RTLIL representation for module `\F_FRAG'.
Generating RTLIL representation for module `\C_FRAG'.
Generating RTLIL representation for module `\ASSP'.
Generating RTLIL representation for module `\MULT'.
Generating RTLIL representation for module `\GMUX_IP'.
Generating RTLIL representation for module `\GMUX_IC'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: /data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/bin/../share/arch/ql-eos-s3_wlcsp/cells/ram_sim.v
Parsing Verilog input from `/data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/bin/../share/arch/ql-eos-s3_wlcsp/cells/ram_sim.v' to AST representation.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR0_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR0_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR0_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR0_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR1_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR1_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR1_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR1_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR0_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR0_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR0_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR0_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR1_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR1_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR1_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR1_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR0_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR0_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR0_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR0_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR1_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR1_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR1_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR1_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA0_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA1_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA2_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA2_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA2_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA0_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA1_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA2_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA2_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA2_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA0_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA1_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA2_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA2_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA2_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA0_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA1_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA2_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA2_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA2_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA0_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA1_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA2_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA2_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA2_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA0_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA1_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA2_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA2_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA2_WSB2_VPR'.
Successfully finished Verilog frontend.

4. Executing SYNTH_QUICKLOGIC pass.

4.1. Executing Verilog-2005 frontend: /data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/cells_sim.v
Parsing Verilog input from `/data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\buff'.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\gclkbuff'.
Successfully finished Verilog frontend.

4.2. Executing Verilog-2005 frontend: /data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_cells_sim.v
Parsing Verilog input from `/data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_cells_sim.v' to AST representation.
Generating RTLIL representation for module `\LUT1'.
Generating RTLIL representation for module `\LUT2'.
Generating RTLIL representation for module `\LUT3'.
Generating RTLIL representation for module `\LUT4'.
Generating RTLIL representation for module `\inpad'.
Generating RTLIL representation for module `\outpad'.
Generating RTLIL representation for module `\ckpad'.
Generating RTLIL representation for module `\bipad'.
Generating RTLIL representation for module `\dff'.
Generating RTLIL representation for module `\dffc'.
Generating RTLIL representation for module `\dffp'.
Generating RTLIL representation for module `\dffpc'.
Generating RTLIL representation for module `\dffe'.
Generating RTLIL representation for module `\dffec'.
Generating RTLIL representation for module `\dffepc'.
Generating RTLIL representation for module `\AND2I0'.
Generating RTLIL representation for module `\mux2x0'.
Generating RTLIL representation for module `\mux2x1'.
Generating RTLIL representation for module `\mux4x0'.
Generating RTLIL representation for module `\mux8x0'.
Generating RTLIL representation for module `\logic_cell_macro'.
Generating RTLIL representation for module `\ahb_gen_bfm'.
Generating RTLIL representation for module `\oscillator_s1'.
Generating RTLIL representation for module `\sdma_bfm'.
Generating RTLIL representation for module `\ahb2fb_asynbrig_if'.
Generating RTLIL representation for module `\fb2ahb_asynbrig_if'.
Generating RTLIL representation for module `\ahb2fb_asynbrig'.
Generating RTLIL representation for module `\qlal4s3b_cell_macro_bfm'.
Generating RTLIL representation for module `\qlal4s3b_cell_macro'.
Generating RTLIL representation for module `\fifo_controller_model'.
Generating RTLIL representation for module `\ram'.
Warning: Replacing memory \ram with list of registers. See /data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_cells_sim.v:3671, /data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_cells_sim.v:3585, /data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_cells_sim.v:3560
Generating RTLIL representation for module `\x2_model'.
Generating RTLIL representation for module `\ram_block_8K'.
Generating RTLIL representation for module `\sw_mux'.
Generating RTLIL representation for module `\ram8k_2x1_cell'.
Generating RTLIL representation for module `\ram8k_2x1_cell_macro'.
Generating RTLIL representation for module `\gpio_cell_macro'.
Generating RTLIL representation for module `\qlal4s3_mult_32x32_cell'.
Generating RTLIL representation for module `\qlal4s3_mult_16x16_cell'.
Generating RTLIL representation for module `\signed_mult'.
Generating RTLIL representation for module `\qlal4s3_mult_cell_macro'.
Generating RTLIL representation for module `\RAM_8K_BLK'.
Generating RTLIL representation for module `\RAM_16K_BLK'.
Generating RTLIL representation for module `\FIFO_8K_BLK'.
Generating RTLIL representation for module `\FIFO_16K_BLK'.
Successfully finished Verilog frontend.

4.3. Executing HIERARCHY pass (managing design hierarchy).

4.3.1. Finding top of design hierarchy..
root of   1 design levels: tff                 
Automatically selected tff as design top module.

4.3.2. Analyzing design hierarchy..
Top module:  \tff

4.3.3. Analyzing design hierarchy..
Top module:  \tff
Removed 0 unused modules.

4.4. Executing PROC pass (convert processes to netlists).

4.4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:4781$44 in module MULT.
Marked 2 switch rules as full_case in process $proc$/data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$26 in module Q_FRAG.
Removed a total of 0 dead cases.

4.4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 1 assignment to connection.

4.4.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\Q_FRAG.$proc$/data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:0$27'.
  Set init value: \QZ = 1'0

4.4.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \QST in `\Q_FRAG.$proc$/data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$26'.
Found async reset \QRT in `\Q_FRAG.$proc$/data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$26'.

4.4.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\MULT.$proc$/data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:4781$44'.
     1/2: $0\Cmult[63:0] [63:32]
     2/2: $0\Cmult[63:0] [31:0]
Creating decoders for process `\Q_FRAG.$proc$/data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:0$27'.
Creating decoders for process `\Q_FRAG.$proc$/data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$26'.
     1/1: $0\QZ[0:0]
Creating decoders for process `\tff.$proc$/data/data/com.termux/files/home/fpga-examples/blink/mohan.v:34$7'.
     1/2: $0\rbar[0:0]
     2/2: $0\r[0:0]
Creating decoders for process `\tff.$proc$/data/data/com.termux/files/home/fpga-examples/blink/mohan.v:26$4'.
     1/2: $0\qbar[0:0]
     2/2: $0\q[0:0]
Creating decoders for process `\tff.$proc$/data/data/com.termux/files/home/fpga-examples/blink/mohan.v:18$1'.
     1/2: $0\pbar[0:0]
     2/2: $0\p[0:0]

4.4.7. Executing PROC_DLATCH pass (convert process syncs to latches).

4.4.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\MULT.\Cmult' using process `\MULT.$proc$/data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:4781$44'.
  created direct connection (no actual register cell created).
Creating register for signal `\Q_FRAG.\QZ' using process `\Q_FRAG.$proc$/data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$26'.
Warning: Complex async reset for dff `\QZ'.
  created $dffsr cell `$procdff$907' with positive edge clock and multiple level-sensitive resets.
Creating register for signal `\tff.\r' using process `\tff.$proc$/data/data/com.termux/files/home/fpga-examples/blink/mohan.v:34$7'.
  created $dff cell `$procdff$908' with positive edge clock.
Creating register for signal `\tff.\rbar' using process `\tff.$proc$/data/data/com.termux/files/home/fpga-examples/blink/mohan.v:34$7'.
  created $dff cell `$procdff$909' with positive edge clock.
Creating register for signal `\tff.\q' using process `\tff.$proc$/data/data/com.termux/files/home/fpga-examples/blink/mohan.v:26$4'.
  created $dff cell `$procdff$910' with positive edge clock.
Creating register for signal `\tff.\qbar' using process `\tff.$proc$/data/data/com.termux/files/home/fpga-examples/blink/mohan.v:26$4'.
  created $dff cell `$procdff$911' with positive edge clock.
Creating register for signal `\tff.\p' using process `\tff.$proc$/data/data/com.termux/files/home/fpga-examples/blink/mohan.v:18$1'.
  created $dff cell `$procdff$912' with positive edge clock.
Creating register for signal `\tff.\pbar' using process `\tff.$proc$/data/data/com.termux/files/home/fpga-examples/blink/mohan.v:18$1'.
  created $dff cell `$procdff$913' with positive edge clock.

4.4.9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 4 empty switches in `\MULT.$proc$/data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:4781$44'.
Removing empty process `MULT.$proc$/data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:4781$44'.
Removing empty process `Q_FRAG.$proc$/data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:0$27'.
Found and cleaned up 1 empty switch in `\Q_FRAG.$proc$/data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$26'.
Removing empty process `Q_FRAG.$proc$/data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$26'.
Found and cleaned up 1 empty switch in `\tff.$proc$/data/data/com.termux/files/home/fpga-examples/blink/mohan.v:34$7'.
Removing empty process `tff.$proc$/data/data/com.termux/files/home/fpga-examples/blink/mohan.v:34$7'.
Found and cleaned up 1 empty switch in `\tff.$proc$/data/data/com.termux/files/home/fpga-examples/blink/mohan.v:26$4'.
Removing empty process `tff.$proc$/data/data/com.termux/files/home/fpga-examples/blink/mohan.v:26$4'.
Found and cleaned up 1 empty switch in `\tff.$proc$/data/data/com.termux/files/home/fpga-examples/blink/mohan.v:18$1'.
Removing empty process `tff.$proc$/data/data/com.termux/files/home/fpga-examples/blink/mohan.v:18$1'.
Cleaned up 8 empty switches.

4.5. Executing FLATTEN pass (flatten design).

4.6. Executing TRIBUF pass.

4.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module tff.

4.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \tff..
Removed 0 unused cells and 12 unused wires.
<suppressed ~1 debug messages>

4.9. Executing DEMINOUT pass (demote inout ports to input or output).

4.10. Executing OPT pass (performing simple optimizations).

4.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module tff.

4.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\tff'.
Removed a total of 0 cells.

4.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \tff..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

4.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \tff.
Performed a total of 0 changes.

4.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\tff'.
Removed a total of 0 cells.

4.10.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \tff..

4.10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module tff.

4.10.9. Finished OPT passes. (There is nothing left to do.)

4.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module tff.

4.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \tff..

4.13. Executing CHECK pass (checking for obvious problems).
checking module tff..
Warning: multiple conflicting drivers for tff.\clk:
    port Sys_Clk0[0] of cell u_qlal4s3b_cell_macro (qlal4s3b_cell_macro)
    module input clk[0]
found and reported 1 problems.

4.14. Executing OPT pass (performing simple optimizations).

4.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module tff.

4.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\tff'.
Removed a total of 0 cells.

4.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \tff..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

4.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \tff.
Performed a total of 0 changes.

4.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\tff'.
Removed a total of 0 cells.

4.14.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \tff..

4.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module tff.

4.14.9. Finished OPT passes. (There is nothing left to do.)

4.15. Executing WREDUCE pass (reducing word size of cells).

4.16. Executing PEEPOPT pass (run peephole optimizers).

4.17. Executing PMUXTREE pass.

4.18. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \tff..

4.19. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module tff:
  created 0 $alu and 0 $macc cells.

4.20. Executing OPT pass (performing simple optimizations).

4.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module tff.

4.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\tff'.
Removed a total of 0 cells.

4.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \tff..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

4.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \tff.
Performed a total of 0 changes.

4.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\tff'.
Removed a total of 0 cells.

4.20.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \tff..

4.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module tff.

4.20.9. Finished OPT passes. (There is nothing left to do.)

4.21. Executing FSM pass (extract and optimize FSM).

4.21.1. Executing FSM_DETECT pass (finding FSMs in design).

4.21.2. Executing FSM_EXTRACT pass (extracting FSM from design).

4.21.3. Executing FSM_OPT pass (simple optimizations of FSMs).

4.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \tff..

4.21.5. Executing FSM_OPT pass (simple optimizations of FSMs).

4.21.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

4.21.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

4.21.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

4.22. Executing OPT pass (performing simple optimizations).

4.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module tff.

4.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\tff'.
Removed a total of 0 cells.

4.22.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \tff..

4.22.5. Finished fast OPT passes.

4.23. Executing MEMORY pass.

4.23.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

4.23.2. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

4.23.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \tff..

4.23.4. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

4.23.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \tff..

4.23.6. Executing MEMORY_COLLECT pass (generating $mem cells).

4.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \tff..

4.25. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

4.26. Executing PP3_BRAMINIT pass.
cell type $not$/data/data/com.termux/files/home/fpga-examples/blink/mohan.v:22$2
cell type $not$/data/data/com.termux/files/home/fpga-examples/blink/mohan.v:23$3
cell type $not$/data/data/com.termux/files/home/fpga-examples/blink/mohan.v:30$5
cell type $not$/data/data/com.termux/files/home/fpga-examples/blink/mohan.v:31$6
cell type $not$/data/data/com.termux/files/home/fpga-examples/blink/mohan.v:38$8
cell type $not$/data/data/com.termux/files/home/fpga-examples/blink/mohan.v:39$9
cell type $procdff$908
cell type $procdff$909
cell type $procdff$910
cell type $procdff$911
cell type $procdff$912
cell type $procdff$913
cell type $procmux$883
cell type $procmux$885
cell type $procmux$887
cell type $procmux$889
cell type $procmux$891
cell type $procmux$893
cell type u_qlal4s3b_cell_macro

4.27. Executing TECHMAP pass (map to technology primitives).

4.27.1. Executing Verilog-2005 frontend: /data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_brams_map.v
Parsing Verilog input from `/data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__QUICKLOGIC_RAMB16K'.
/data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_brams_map.v:21: Warning: Identifier `\VCC' is implicitly declared.
/data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_brams_map.v:22: Warning: Identifier `\GND' is implicitly declared.
Generating RTLIL representation for module `\$__QUICKLOGIC_RAMB8K'.
/data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_brams_map.v:235: Warning: Identifier `\GND' is implicitly declared.
/data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_brams_map.v:236: Warning: Identifier `\VCC' is implicitly declared.
Generating RTLIL representation for module `\RAM_8K_BLK'.
/data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_brams_map.v:538: Warning: Range [17:0] select out of bounds on signal `\out_reg0': Setting 2 MSB bits to undef.
Generating RTLIL representation for module `\RAM_16K_BLK'.
/data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_brams_map.v:824: Warning: Range [35:0] select out of bounds on signal `\out_reg0': Setting 4 MSB bits to undef.
Generating RTLIL representation for module `\FIFO_8K_BLK'.
/data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_brams_map.v:998: Warning: Range [35:0] select out of bounds on signal `\out_reg0': Setting 20 MSB bits to undef.
Generating RTLIL representation for module `\FIFO_16K_BLK'.
/data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_brams_map.v:1249: Warning: Range [35:0] select out of bounds on signal `\out_reg0': Setting 4 MSB bits to undef.
Successfully finished Verilog frontend.

4.27.2. Continuing TECHMAP pass.
No more expansions possible.

4.28. Executing OPT pass (performing simple optimizations).

4.28.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module tff.

4.28.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\tff'.
Removed a total of 0 cells.

4.28.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.28.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \tff..

4.28.5. Finished fast OPT passes.

4.29. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

4.30. Executing OPT pass (performing simple optimizations).

4.30.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module tff.

4.30.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\tff'.
Removed a total of 0 cells.

4.30.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \tff..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

4.30.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \tff.
Performed a total of 0 changes.

4.30.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\tff'.
Removed a total of 0 cells.

4.30.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.30.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \tff..

4.30.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module tff.

4.30.9. Finished OPT passes. (There is nothing left to do.)

4.31. Executing TECHMAP pass (map to technology primitives).

4.31.1. Executing Verilog-2005 frontend: /data/data/com.termux/files/home/symbiflow/bin/../share/yosys/techmap.v
Parsing Verilog input from `/data/data/com.termux/files/home/symbiflow/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

4.31.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $dff.
No more expansions possible.
<suppressed ~18 debug messages>

4.32. Executing OPT pass (performing simple optimizations).

4.32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module tff.

4.32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\tff'.
Removed a total of 0 cells.

4.32.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.32.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \tff..

4.32.5. Finished fast OPT passes.

4.33. Executing MUXCOVER pass (mapping to wider MUXes).
Covering MUX trees in module tff..
  Treeifying 6 MUXes:
    Found tree with 1 MUXes at root $0\p[0:0].
    Found tree with 1 MUXes at root $0\pbar[0:0].
    Found tree with 1 MUXes at root $0\q[0:0].
    Found tree with 1 MUXes at root $0\qbar[0:0].
    Found tree with 1 MUXes at root $0\r[0:0].
    Found tree with 1 MUXes at root $0\rbar[0:0].
    Finished treeification: Found 6 trees.
  Covering trees:
    Replaced tree at $0\p[0:0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\pbar[0:0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\q[0:0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\qbar[0:0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\r[0:0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\rbar[0:0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
  Added a total of 0 decoder MUXes.
<suppressed ~151 debug messages>

4.34. Executing OPT_EXPR pass (perform const folding).
Optimizing module tff.

4.35. Executing OPT pass (performing simple optimizations).

4.35.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module tff.

4.35.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\tff'.
Removed a total of 0 cells.

4.35.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.35.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \tff..

4.35.5. Finished fast OPT passes.

4.36. Executing OPT_EXPR pass (perform const folding).
Optimizing module tff.

4.37. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\tff'.
Removed a total of 0 cells.

4.38. Executing OPT_RMDFF pass (remove dff with constant values).

4.39. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \tff..

4.40. Executing OPT pass (performing simple optimizations).

4.40.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module tff.

4.40.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\tff'.
Removed a total of 0 cells.

4.40.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \tff..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.40.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \tff.
Performed a total of 0 changes.

4.40.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\tff'.
Removed a total of 0 cells.

4.40.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.40.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \tff..

4.40.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module tff.

4.40.9. Finished OPT passes. (There is nothing left to do.)

4.41. Executing OPT_EXPR pass (perform const folding).
Optimizing module tff.

4.42. Executing DFF2DFFE pass (transform $dff to $dffe where applicable).
Transforming FF to FF+Enable cells in module tff:
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$1024 for $0\r[0:0] -> \r.
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$1012.
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$1031 for $0\rbar[0:0] -> \rbar.
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$1013.
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$1038 for $0\q[0:0] -> \q.
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$1014.
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$1045 for $0\qbar[0:0] -> \qbar.
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$1015.
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$1052 for $0\p[0:0] -> \p.
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$1016.
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$1059 for $0\pbar[0:0] -> \pbar.
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$1017.

4.43. Executing TECHMAP pass (map to technology primitives).

4.43.1. Executing Verilog-2005 frontend: /data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_ffs_map.v
Parsing Verilog input from `/data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFFSR_NPP_'.
Generating RTLIL representation for module `\$_DFFSR_PPP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Successfully finished Verilog frontend.

4.43.2. Continuing TECHMAP pass.
Using template \$_DFFE_PP_ for cells of type $_DFFE_PP_.
No more expansions possible.
<suppressed ~6 debug messages>

4.44. Executing OPT_EXPR pass (perform const folding).
Optimizing module tff.
<suppressed ~12 debug messages>

4.45. Executing SIMPLEMAP pass (map simple cells to gate primitives).

4.46. Executing OPT_EXPR pass (perform const folding).
Optimizing module tff.

4.47. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\tff'.
Removed a total of 0 cells.

4.48. Executing OPT_RMDFF pass (remove dff with constant values).

4.49. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \tff..
Removed 0 unused cells and 42 unused wires.
<suppressed ~1 debug messages>

4.50. Executing OPT pass (performing simple optimizations).

4.50.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module tff.

4.50.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\tff'.
Removed a total of 0 cells.

4.50.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \tff..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.50.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \tff.
Performed a total of 0 changes.

4.50.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\tff'.
Removed a total of 0 cells.

4.50.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.50.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \tff..

4.50.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module tff.

4.50.9. Finished OPT passes. (There is nothing left to do.)

4.51. Executing TECHMAP pass (map to technology primitives).

4.51.1. Executing Verilog-2005 frontend: /data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_latches_map.v
Parsing Verilog input from `/data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCHSR_NNN_'.
Generating RTLIL representation for module `\$_DLATCHSR_NNP_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPN_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPP_'.
Generating RTLIL representation for module `\$_DLATCHSR_PNN_'.
Generating RTLIL representation for module `\$_DLATCHSR_PNP_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPN_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPP_'.
Successfully finished Verilog frontend.

4.51.2. Continuing TECHMAP pass.
No more expansions possible.

4.52. Executing ABC pass (technology mapping using ABC).

4.52.1. Extracting gate netlist of module `\tff' to `<abc-temp-dir>/input.blif'..
Extracted 6 gates and 12 wires to a netlist network with 6 inputs and 6 outputs.

4.52.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + write_blif <abc-temp-dir>/output.blif 

4.52.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:        6
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:        6
ABC RESULTS:          output signals:        6
Removing temp directory.

4.53. Executing TECHMAP pass (map to technology primitives).

4.53.1. Executing Verilog-2005 frontend: /data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_ffs_map.v
Parsing Verilog input from `/data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFFSR_NPP_'.
Generating RTLIL representation for module `\$_DFFSR_PPP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Successfully finished Verilog frontend.

4.53.2. Continuing TECHMAP pass.
No more expansions possible.
Removed 0 unused cells and 12 unused wires.

4.54. Executing TECHMAP pass (map to technology primitives).

4.54.1. Executing Verilog-2005 frontend: /data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_cells_map.v
Parsing Verilog input from `/data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_MUX8_'.
Generating RTLIL representation for module `\$_MUX4_'.
Generating RTLIL representation for module `\$_MUX_'.
Generating RTLIL representation for module `\$_NOT_'.
Generating RTLIL representation for module `\qlal4s3_mult_16x16_cell'.
/data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_cells_map.v:44: Warning: Identifier `\Valid_mult_w' is implicitly declared.
Successfully finished Verilog frontend.

4.54.2. Executing Verilog-2005 frontend: /data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_lut_map.v
Parsing Verilog input from `/data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_lut_map.v' to AST representation.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

4.54.3. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=1\LUT=2'01 for cells of type $lut.
No more expansions possible.
<suppressed ~19 debug messages>
Removed 0 unused cells and 12 unused wires.

4.55. Executing Quicklogic_EQN pass (calculate equations for luts).

4.56. Updated 6 of LUT* elements with equation.

4.57. Executing AUTONAME pass.
Renamed 24 objects in module tff (3 iterations).
<suppressed ~18 debug messages>

4.58. Executing HIERARCHY pass (managing design hierarchy).

4.58.1. Analyzing design hierarchy..
Top module:  \tff

4.58.2. Analyzing design hierarchy..
Top module:  \tff
Removed 0 unused modules.

4.59. Printing statistics.

=== tff ===

   Number of wires:                 16
   Number of wire bits:             16
   Number of public wires:          16
   Number of public wire bits:      16
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 13
     LUT1                            6
     dffe                            6
     qlal4s3b_cell_macro             1

4.60. Executing CHECK pass (checking for obvious problems).
checking module tff..
Warning: multiple conflicting drivers for tff.\clk:
    port Sys_Clk0[0] of cell u_qlal4s3b_cell_macro (qlal4s3b_cell_macro)
    module input clk[0]
found and reported 1 problems.

4.61. Executing CLKBUFMAP pass (inserting global clock buffers).
Inserting $_BUF_ on tff.clk[0].
Inserting ckpad on tff.clk[0].

4.62. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Marking already mapped port: ckpad.P[0].
Marking already mapped port: tff.clk[0].
Mapping port tff.p using outpad.
Mapping port tff.pbar using outpad.
Mapping port tff.q using outpad.
Mapping port tff.qbar using outpad.
Mapping port tff.r using outpad.
Mapping port tff.rbar using outpad.
Mapping port tff.tp using inpad.
Mapping port tff.tq using inpad.
Mapping port tff.tr using inpad.

4.63. Executing SPLITNETS pass (splitting up multi-bit signals).

4.64. Executing SETUNDEF pass (replace undef values with defined constants).

4.65. Executing HILOMAP pass (mapping to constant drivers).

4.66. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \tff..
Removed 0 unused cells and 2 unused wires.
<suppressed ~2 debug messages>

4.67. Executing CHECK pass (checking for obvious problems).
checking module tff..
Warning: multiple conflicting drivers for tff.\clk:
    port Sys_Clk0[0] of cell u_qlal4s3b_cell_macro (qlal4s3b_cell_macro)
    module input clk[0]
found and reported 1 problems.

5. Printing statistics.

=== tff ===

   Number of wires:                 26
   Number of wire bits:             26
   Number of public wires:          16
   Number of public wire bits:      16
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 23
     LUT1                            6
     ckpad                           1
     dffe                            6
     inpad                           3
     outpad                          6
     qlal4s3b_cell_macro             1

Loading PCF from '/data/data/com.termux/files/home/fpga-examples/blink/quickfeather.pcf'...
Loading pinmap CSV from '/data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/arch/ql-eos-s3_wlcsp/pinmap_PU64.csv'...
Processing cells...
  type       | net        | pad        | loc      | type     | instance
 ------------+------------+------------+----------+----------+-----------
  ckpad      | clk        | 3          | X12Y3    | BIDIR    | $auto$clkbufmap.cc:252:execute$1088
  outpad     | p          | 61         | X20Y3    | BIDIR    | $iopadmap$tff.p
  outpad     | pbar       | 57         | X26Y3    | BIDIR    | $iopadmap$tff.pbar
  outpad     | q          | 60         | X22Y3    | BIDIR    | $iopadmap$tff.q
  outpad     | qbar       | 56         | X28Y3    | BIDIR    | $iopadmap$tff.qbar
  outpad     | r          | 59         | X24Y3    | BIDIR    | $iopadmap$tff.r
  outpad     | rbar       | 55         | X30Y3    | BIDIR    | $iopadmap$tff.rbar
  inpad      | tp         | 64         | X14Y3    | BIDIR    | $iopadmap$tff.tp
  inpad      | tq         | 62         | X16Y3    | BIDIR    | $iopadmap$tff.tq
  inpad      | tr         | 63         | X18Y3    | BIDIR    | $iopadmap$tff.tr

6. Executing Verilog backend.
Dumping module `\tff'.

7. Executing TECHMAP pass (map to technology primitives).

7.1. Executing Verilog-2005 frontend: /data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_map.v
Parsing Verilog input from `/data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_map.v' to AST representation.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\inpad'.
Generating RTLIL representation for module `\outpad'.
Generating RTLIL representation for module `\bipad'.
Generating RTLIL representation for module `\ckpad'.
Generating RTLIL representation for module `\qhsckibuff'.
Generating RTLIL representation for module `\qhsckbuff'.
Generating RTLIL representation for module `\gclkbuff'.
Generating RTLIL representation for module `\logic_cell_macro'.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\mux2x0'.
Generating RTLIL representation for module `\mux4x0'.
Generating RTLIL representation for module `\mux8x0'.
Generating RTLIL representation for module `\LUT1'.
Generating RTLIL representation for module `\LUT2'.
Generating RTLIL representation for module `\LUT3'.
Generating RTLIL representation for module `\LUT4'.
Generating RTLIL representation for module `\dff'.
Generating RTLIL representation for module `\dffc'.
Generating RTLIL representation for module `\dffp'.
Generating RTLIL representation for module `\dffpc'.
Generating RTLIL representation for module `\dffe'.
Generating RTLIL representation for module `\dffec'.
Generating RTLIL representation for module `\dffepc'.
Generating RTLIL representation for module `\dffsc'.
Generating RTLIL representation for module `\qlal4s3b_cell_macro'.
Generating RTLIL representation for module `\qlal4s3_mult_32x32_cell'.
Generating RTLIL representation for module `\qlal4s3_mult_16x16_cell'.
Generating RTLIL representation for module `\qlal4s3_mult_cell_macro'.
Successfully finished Verilog frontend.

7.2. Continuing TECHMAP pass.
No more expansions possible.

8. Executing TECHMAP pass (map to technology primitives).

8.1. Executing Verilog-2005 frontend: /data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_map.v
Parsing Verilog input from `/data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_map.v' to AST representation.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\inpad'.
Generating RTLIL representation for module `\outpad'.
Generating RTLIL representation for module `\bipad'.
Generating RTLIL representation for module `\ckpad'.
Generating RTLIL representation for module `\qhsckibuff'.
Generating RTLIL representation for module `\qhsckbuff'.
Generating RTLIL representation for module `\gclkbuff'.
Generating RTLIL representation for module `\logic_cell_macro'.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\mux2x0'.
Generating RTLIL representation for module `\mux4x0'.
Generating RTLIL representation for module `\mux8x0'.
Generating RTLIL representation for module `\LUT1'.
Generating RTLIL representation for module `\LUT2'.
Generating RTLIL representation for module `\LUT3'.
Generating RTLIL representation for module `\LUT4'.
Generating RTLIL representation for module `\dff'.
Generating RTLIL representation for module `\dffc'.
Generating RTLIL representation for module `\dffp'.
Generating RTLIL representation for module `\dffpc'.
Generating RTLIL representation for module `\dffe'.
Generating RTLIL representation for module `\dffec'.
Generating RTLIL representation for module `\dffepc'.
Generating RTLIL representation for module `\dffsc'.
Generating RTLIL representation for module `\qlal4s3b_cell_macro'.
Generating RTLIL representation for module `\qlal4s3_mult_32x32_cell'.
Generating RTLIL representation for module `\qlal4s3_mult_16x16_cell'.
Generating RTLIL representation for module `\qlal4s3_mult_cell_macro'.
Successfully finished Verilog frontend.

8.2. Continuing TECHMAP pass.
Using template qlal4s3b_cell_macro for cells of type qlal4s3b_cell_macro.
Using template $paramod$3494bf91dff70d828c5f5312272dede938de1112\ckpad for cells of type ckpad.
Using template $paramod\LUT1\INIT=1'1\EQN=675885097 for cells of type LUT1.
Using template $paramod$03fa78d84bd5e07f6e124fa217a4ce84543d615a\inpad for cells of type inpad.
Using template dffe for cells of type dffe.
Using template $paramod$fa3380cd31d3eaf3369d75f1d1b91f2cba5e8470\outpad for cells of type outpad.
Using template $paramod$666d57638572eef64b702648a4829c6da6ea5f7a\inpad for cells of type inpad.
Using template $paramod$4da62a2f3593426548f45892aaeb7356ad46a6a4\inpad for cells of type inpad.
Using template $paramod$02aa829d7bb4d3bbae67ad5ee2e5a326704559e9\outpad for cells of type outpad.
Using template $paramod$adb3e2998d36d23e78e72d530fe94019908a146e\outpad for cells of type outpad.
Using template $paramod$d8b4ab69a8b5413c066ad38d899c9d4a3dedc93a\outpad for cells of type outpad.
Using template $paramod$8710e5724ea7597aec6f86bf8982eb7dcf6e45e0\outpad for cells of type outpad.
Using template $paramod$1ff3cb955baebb34bce84175d8b64f00bac588c5\outpad for cells of type outpad.
Using template $paramod$3494bf91dff70d828c5f5312272dede938de1112\inpad for cells of type inpad.
No more expansions possible.
<suppressed ~202 debug messages>

9. Executing TECHMAP pass (map to technology primitives).

9.1. Executing Verilog-2005 frontend: /data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/bin/../share/arch/ql-eos-s3_wlcsp/cells/ram_map.v
Parsing Verilog input from `/data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/bin/../share/arch/ql-eos-s3_wlcsp/cells/ram_map.v' to AST representation.
Generating RTLIL representation for module `\ram8k_2x1_cell_macro'.
Successfully finished Verilog frontend.

9.2. Continuing TECHMAP pass.
No more expansions possible.

10. Executing OPT_EXPR pass (perform const folding).
Optimizing module tff.
<suppressed ~46 debug messages>

11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \tff..
Removed 0 unused cells and 89 unused wires.
<suppressed ~1 debug messages>

12. Executing SETUNDEF pass (replace undef values with defined constants).

13. Printing statistics.

=== tff ===

   Number of wires:                 61
   Number of wire bits:            178
   Number of public wires:          28
   Number of public wire bits:      28
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 23
     ASSP                            1
     BIDIR_CELL                     10
     F_FRAG                          6
     Q_FRAG                          6

14. Executing JSON backend.

15. Executing Verilog backend.
Dumping module `\tff'.

Warnings: 15 unique messages, 20 total
End of script. Logfile hash: 32ec554429, CPU: user 11.60s system 0.42s, MEM: 256.05 MB peak
Yosys 0.9+2406 (git sha1 ca763e6d5, gcc 10.2.1-6 -fPIC -Os)
Time spent: 69% 18x read_verilog (8 sec), 7% 21x opt_clean (0 sec), ...
